name: Release

on:
  workflow_dispatch:
    inputs:
      sukisu_branch:
        description: 'SukiSU Branch'
        required: true
        default: 'Stable(标准)'
        type: choice
        options:
          - Stable(标准)
          - Dev(开发)
      enable_susfs:
        description: 'Enable SUSFS'
        required: true
        default: true
        type: boolean
      enable_kpm:
        description: 'Enable KPM (Kernel Patch Module)'
        required: true
        default: true
        type: boolean
      enable_zram:
        description: 'Enable ZRAM optimizations (LZ4KD)'
        required: true
        default: true
        type: boolean
      release_version:
        description: 'Release Version'
        required: true
        default: 'v1.5.12-r1'
        type: string

env:
  AOSP_TOOLCHAIN_BRANCH: android16
  AOSP_CLANG_VERSION: r522817
  KERNEL_LOCALVERSION: spacealtctrl-sukisu
  ANDROID_VERSION: android14
  KERNEL_VERSION: 5.15

jobs:
  build:
    name: Build ${{ matrix.device }}
    permissions: { contents: write }
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        device: [pdx234, pdx237]
      fail-fast: false
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'

      - name: Install packages
        env:
          PACKAGES:
            binutils-arm-linux-gnueabi
            binutils-aarch64-linux-gnu
            ccache
            libelf-dev
            libssl-dev
            bc
            bison
            flex
            python3
            python-is-python3
            dwarves
            build-essential
            libc6-dev
            curl
            git
            zip
            unzip
            pigz
        run: |
          echo 'Acquire::Queue-Mode "host";' | sudo tee /etc/apt/apt.conf.d/99parallel
          echo 'Acquire::http::Pipeline-Depth "5";' | sudo tee -a /etc/apt/apt.conf.d/99parallel
          sudo apt update -qq
          sudo apt install -y ${{ env.PACKAGES }} -qq
      - name: Initialize error log
        run: |
          echo "=== Build Process Error and Warning Log ===" > error-log-${{ matrix.device }}.txt
          echo "Build started: $(date -u)" >> error-log-${{ matrix.device }}.txt
          echo "Device: ${{ matrix.device }}" >> error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Sync kernel repository
        uses: actions/checkout@v4
        with:
          repository: spacealtctrl/android_kernel_sony_sm8550
          ref: lineage-23.0
          path: kernel
          fetch-depth: 1

      - name: Clean kernel build environment
        working-directory: kernel
        run: |
          echo "Cleaning kernel build environment..." | tee -a ../error-log-${{ matrix.device }}.txt
          make mrproper 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
          make clean 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
          echo "✓ Kernel environment cleaned" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "" >> ../error-log-${{ matrix.device }}.txt
      - name: Cache Clang
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: clang
          key: clang-${{ env.AOSP_TOOLCHAIN_BRANCH }}-${{ env.AOSP_CLANG_VERSION }}

      - name: Download Clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          echo "Downloading Clang..." | tee -a error-log-${{ matrix.device }}.txt
          mkdir -p clang &&
          curl -LSs "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.AOSP_TOOLCHAIN_BRANCH }}-release/clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz" |
          tar xz -C clang
          echo "✓ Clang downloaded and extracted" | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Cache ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: kernel-${{ matrix.device }}-sukisu
          restore-keys: kernel-${{ matrix.device }}-sukisu
          max-size: 3G
          save: true

      - name: Setup swap
        run: |
          echo "Setting up swap..." | tee -a error-log-${{ matrix.device }}.txt
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon -s
          echo "✓ Swap configured" | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Clone SukiSU and SUSFS dependencies
        run: |
          echo "--- Cloning Dependencies ---" | tee -a error-log-${{ matrix.device }}.txt
          echo "Cloning SukiSU and SUSFS dependencies in parallel..."
          
          # Set SUSFS branch dynamically based on kernel version
          SUSFS_BRANCH="gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
          echo "Using SUSFS branch: $SUSFS_BRANCH" | tee -a error-log-${{ matrix.device }}.txt
          
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" 2>&1 | tee -a error-log-${{ matrix.device }}.txt &
          git clone --depth=1 https://github.com/WildPlusKernel/kernel_patches.git 2>&1 | tee -a error-log-${{ matrix.device }}.txt &
          git clone --depth=1 https://github.com/ShirkNeko/SukiSU_patch.git 2>&1 | tee -a error-log-${{ matrix.device }}.txt &
          git clone --depth=1 https://github.com/zzh20188/GKI_KernelSU_SUSFS.git zzh_patches 2>&1 | tee -a error-log-${{ matrix.device }}.txt &
          wait
          echo "✓ Dependencies cloned successfully" | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Clone additional repositories for LZ4 upgrade
        run: |
          echo "Verifying LZ4 patches repository..." | tee -a error-log-${{ matrix.device }}.txt
          if [ -d "zzh_patches" ]; then
            echo "✓ LZ4 patches repository already available" | tee -a error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: LZ4 patches repository missing!" | tee -a error-log-${{ matrix.device }}.txt
            exit 1
          fi
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Upgrade LZ4 to version 1.10.0
        if: ${{ github.event.inputs.enable_zram == 'true' }}
        working-directory: kernel
        run: |
          echo "--- LZ4 1.10.0 Upgrade ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Upgrading LZ4 to version 1.10.0..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
          )
          
          for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                  rm "$file"
                  echo "  Removed: $file" | tee -a ../error-log-${{ matrix.device }}.txt
              else
                  echo "  ⚠ File not found (skipping): $file" | tee -a ../error-log-${{ matrix.device }}.txt
              fi
          done
          
          cp -r ../zzh_patches/zram/lz4/* ./lib/lz4/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
          cp -r ../zzh_patches/zram/include/linux/* ./include/linux/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
          
          if [ -f "../zzh_patches/zram/${{ env.KERNEL_VERSION }}/lz4_1.10.0.patch" ]; then
            cp ../zzh_patches/zram/${{ env.KERNEL_VERSION }}/lz4_1.10.0.patch ./
            echo "Applying LZ4 1.10.0 patch..." | tee -a ../error-log-${{ matrix.device }}.txt
            if patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
              echo "✓ LZ4 1.10.0 patch applied successfully" | tee -a ../error-log-${{ matrix.device }}.txt
            else
              echo "⚠ LZ4 1.10.0 patch had issues (continuing)" | tee -a ../error-log-${{ matrix.device }}.txt
            fi
          else
            echo "⚠ LZ4 1.10.0 patch not found for kernel ${{ env.KERNEL_VERSION }}" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          
          if [ -f "fs/f2fs/Makefile" ]; then
              if ! grep -qF "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" "fs/f2fs/Makefile"; then
                  echo "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" >> "fs/f2fs/Makefile"
                  echo "✓ Added F2FS iostat configuration" | tee -a ../error-log-${{ matrix.device }}.txt
              fi
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
      - name: Add SukiSU
        working-directory: kernel
        run: |
          echo "--- Adding SukiSU ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Adding SukiSU to kernel..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          if [ "${{ github.event.inputs.sukisu_branch }}" == "Stable(标准)" ]; then
            echo "Using SukiSU Stable branch (susfs-main)" | tee -a ../error-log-${{ matrix.device }}.txt
            BRANCH="-s susfs-main"
          elif [ "${{ github.event.inputs.sukisu_branch }}" == "Dev(开发)" ]; then
            echo "Using SukiSU Dev branch (susfs-test)" | tee -a ../error-log-${{ matrix.device }}.txt
            BRANCH="-s susfs-test"
          else
            echo "⚠ Invalid branch selection, defaulting to stable" | tee -a ../error-log-${{ matrix.device }}.txt
            BRANCH="-s susfs-main"
          fi
          
          if curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ SukiSU setup completed" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: SukiSU setup failed!" | tee -a ../error-log-${{ matrix.device }}.txt
            exit 1
          fi
          
          if [ ! -d "KernelSU" ]; then
            echo "✗ ERROR: KernelSU directory not found!" | tee -a ../error-log-${{ matrix.device }}.txt
            exit 1
          else
            echo "✓ KernelSU directory verified" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
      - name: Add Baseband-guard support
        working-directory: kernel
        run: |
          LOG="../error-log-${{ matrix.device }}.txt"
          
          echo "--- Adding Baseband-guard ---" | tee -a "$LOG"
          echo "Downloading and running Baseband-guard setup script..." | tee -a "$LOG"
          # Run setup.sh without --cleanup to avoid removing other LSM defaults
          if wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash 2>&1 | tee -a "$LOG"; then
            echo "✓ Baseband-guard setup completed" | tee -a "$LOG"
          else
            echo "⚠ Baseband-guard setup had issues (continuing)" | tee -a "$LOG"
          fi
          echo "Enabling Baseband-guard kernel configuration..." | tee -a "$LOG"
          CONFIG_FILE="arch/arm64/configs/${{ matrix.device }}_defconfig"
          # Add CONFIG_BBG=y if not already present
          grep -q '^CONFIG_BBG=y' "$CONFIG_FILE" || echo 'CONFIG_BBG=y' >> "$CONFIG_FILE"
          # Ensure baseband_guard is included in CONFIG_LSM
          if grep -q '^CONFIG_LSM=' "$CONFIG_FILE"; then
              sed -i 's/^CONFIG_LSM="\([^"]*\)"/CONFIG_LSM="\1,baseband_guard"/' "$CONFIG_FILE"
          else
              echo 'CONFIG_LSM="baseband_guard"' >> "$CONFIG_FILE"
          fi
          echo "✓ Baseband-guard configuration completed" | tee -a "$LOG"
          echo "" >> "$LOG"
      - name: Verify SUSFS patch files exist
        if: ${{ github.event.inputs.enable_susfs == 'true' }}
        run: |
          echo "--- SUSFS Patch Verification ---" | tee -a error-log-${{ matrix.device }}.txt
          
          PATCH_FILE="susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch"
          
          if [ ! -f "$PATCH_FILE" ]; then
            echo "✗ ERROR: SUSFS patch not found: $PATCH_FILE" | tee -a error-log-${{ matrix.device }}.txt
            echo "Available patches in susfs4ksu/kernel_patches/:" | tee -a error-log-${{ matrix.device }}.txt
            ls -la susfs4ksu/kernel_patches/ | tee -a error-log-${{ matrix.device }}.txt
            exit 1
          else
            echo "✓ Found SUSFS patch: $PATCH_FILE" | tee -a error-log-${{ matrix.device }}.txt
          fi
          
          if [ ! -d "susfs4ksu/kernel_patches/fs" ]; then
            echo "✗ ERROR: SUSFS fs directory not found" | tee -a error-log-${{ matrix.device }}.txt
            exit 1
          else
            echo "✓ Found SUSFS fs directory" | tee -a error-log-${{ matrix.device }}.txt
          fi
          
          if [ ! -d "susfs4ksu/kernel_patches/include/linux" ]; then
            echo "✗ ERROR: SUSFS include directory not found" | tee -a error-log-${{ matrix.device }}.txt
            exit 1
          else
            echo "✓ Found SUSFS include directory" | tee -a error-log-${{ matrix.device }}.txt
          fi
          echo "" >> error-log-${{ matrix.device }}.txt
      - name: Apply SUSFS patches for SukiSU
        if: ${{ github.event.inputs.enable_susfs == 'true' }}
        working-directory: kernel
        run: |
          echo "--- SUSFS Patch Application ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Applying SUSFS patches..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          # Copy main SUSFS patch
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
          echo "✓ Main SUSFS patch copied" | tee -a ../error-log-${{ matrix.device }}.txt
          
          # Copy SUSFS filesystem files
          if cp ../susfs4ksu/kernel_patches/fs/* ./fs/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ SUSFS fs files copied" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Some SUSFS fs files not copied" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          
          # Copy SUSFS include files
          if cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ SUSFS include files copied" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Some SUSFS include files not copied" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          
          # Apply main SUSFS patch
          echo "Applying main SUSFS patch..." | tee -a ../error-log-${{ matrix.device }}.txt
          if patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ Main SUSFS patch applied successfully" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Main SUSFS patch had issues (continuing)" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
      - name: Apply VFS hooks for SukiSU (scope_min_manual_hooks v1.4)
        working-directory: kernel
        run: |
          echo "--- VFS Hooks Application (Minimized Scope) ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Applying scope_min_manual_hooks v1.4 for SukiSU..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          if [ ! -f "../kernel_patches/next/scope_min_manual_hooks_v1.4.patch" ]; then
            echo "✗ ERROR: scope_min_manual_hooks_v1.4.patch not found!" | tee -a ../error-log-${{ matrix.device }}.txt
            echo "Available files in kernel_patches/next/:" | tee -a ../error-log-${{ matrix.device }}.txt
            ls -la ../kernel_patches/next/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt
            exit 1
          fi
          
          cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
          if patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ VFS hooks (scope_min_manual_hooks v1.4) applied successfully" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ VFS hooks patch had issues (continuing)" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
      - name: Apply ZRAM optimizations (LZ4KD)
        if: ${{ github.event.inputs.enable_zram == 'true' }}
        working-directory: kernel
        run: |
          echo "--- ZRAM LZ4KD Optimization ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Applying ZRAM LZ4KD optimizations..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          if cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ LZ4K include files copied" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Some LZ4K include files not copied" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          if cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ LZ4K lib files copied" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Some LZ4K lib files not copied" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          if cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/ 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ LZ4K crypto files copied" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "⚠ Some LZ4K crypto files not copied" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          
          if [ -f "../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            echo "Applying lz4kd patch..." | tee -a ../error-log-${{ matrix.device }}.txt
            if patch -p1 -F 3 < lz4kd.patch 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
              echo "✓ lz4kd patch applied successfully" | tee -a ../error-log-${{ matrix.device }}.txt
            else
              echo "⚠ lz4kd patch had issues (continuing)" | tee -a ../error-log-${{ matrix.device }}.txt
            fi
          else
            echo "⚠ lz4kd patch not found for kernel ${{ env.KERNEL_VERSION }}" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
          
      - name: Configure kernel features
        working-directory: kernel
        run: |
          echo "--- Kernel Configuration ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Adding KernelSU configurations..." | tee -a ../error-log-${{ matrix.device }}.txt
          
          DEFCONFIG="arch/arm64/configs/${{ matrix.device }}_defconfig"
          
          echo "Using defconfig: $DEFCONFIG" | tee -a ../error-log-${{ matrix.device }}.txt
          
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          if [ "${{ github.event.inputs.enable_kpm }}" == "true" ]; then
            echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          fi
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$DEFCONFIG"
          
          if [ "${{ github.event.inputs.enable_susfs }}" == "true" ]; then
            echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SUS_MAP=n" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"
          fi
          
          if [ "${{ github.event.inputs.enable_zram }}" == "true" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$DEFCONFIG"
            echo "CONFIG_ZRAM=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_842=y" >> "$DEFCONFIG"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$DEFCONFIG"
            echo "CONFIG_CRYPTO_LZO=y" >> "$DEFCONFIG"
          fi
          
          echo "CONFIG_TMPFS_XATTR=y" >> "$DEFCONFIG"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$DEFCONFIG"
          echo "CONFIG_NET_SCH_FQ=y" >> "$DEFCONFIG"
          echo "CONFIG_DEFAULT_BBR=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$DEFCONFIG"
          echo "✓ Kernel configuration completed" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "" >> ../error-log-${{ matrix.device }}.txt
          
      - name: Update kernel version string
        working-directory: kernel
        run: |
          echo "--- Kernel Version String ---" | tee -a ../error-log-${{ matrix.device }}.txt
          FEATURES=""
          if [ "${{ github.event.inputs.enable_susfs }}" == "true" ]; then
            FEATURES="${FEATURES}-SUSFS"
          fi
          if [ "${{ github.event.inputs.enable_kpm }}" == "true" ]; then
            FEATURES="${FEATURES}-KPM"
          fi
          
          if [ -f "scripts/setlocalversion" ]; then
            sed -i "\$s|echo \"\$res\"|echo \"\$res${FEATURES}\"|" scripts/setlocalversion
            echo "✓ Kernel version string updated with: ${FEATURES}" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
          
      - name: Configure git for clean build
        working-directory: kernel
        run: |
          echo "--- Git Configuration ---" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Configuring git to prevent dirty build..." | tee -a ../error-log-${{ matrix.device }}.txt
          git config --global user.email "spacealtctrl@pm.me"
          git config --global user.name "spacealtctrl"
          rm -rf .gitmodules 2>/dev/null || true
          git rm --cached KernelSU 2>/dev/null || true
          
          git add .
          if git commit -m "Applied SukiSU patches and configurations" 2>&1 | tee -a ../error-log-${{ matrix.device }}.txt; then
            echo "✓ Git commit successful" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "ℹ Git commit not needed or failed (continuing)" | tee -a ../error-log-${{ matrix.device }}.txt
          fi
          echo "" >> ../error-log-${{ matrix.device }}.txt
          
      - name: Optimize ccache
        run: |
          echo "--- Ccache Optimization ---" | tee -a error-log-${{ matrix.device }}.txt
          ccache -M 3G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=1
          ccache --set-config=max_size=3G
          ccache --set-config=sloppiness=file_macro,time_macros,include_file_mtime,include_file_ctime
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=1" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV
          echo "✓ Ccache configured" | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
          
      - name: Pre-build Setup
        run: |
          echo "--- Pre-build Setup ---" | tee -a error-log-${{ matrix.device }}.txt
          sudo mkdir -p /mnt/tmpfs
          sudo mount -t tmpfs -o size=10G tmpfs /mnt/tmpfs
          mkdir -p /mnt/tmpfs/out
          ln -sf /mnt/tmpfs/out kernel/out
          echo "✓ tmpfs mounted and linked" | tee -a error-log-${{ matrix.device }}.txt
          df -h | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
          
      - name: Build kernel
        working-directory: kernel
        env:
          MAKE_ARGS:
            O=out LLVM=1 LLVM_IAS=1 ARCH=arm64
            -j$(nproc --all) CC="ccache clang"
            CROSS_COMPILE=aarch64-linux-gnu-
            CROSS_COMPILE_ARM32=arm-linux-gnueabi-
            LOCALVERSION=-${{ env.KERNEL_LOCALVERSION }}
            KCFLAGS="-Wframe-larger-than=15000"
        run: |
          echo "--- Kernel Build ---" | tee -a ../error-log-${{ matrix.device }}.txt
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          export PAHOLE=/usr/bin/pahole
          export BTF_DEBUG_INFO=y
          echo "Building with $(nproc --all) parallel jobs..." | tee -a ../error-log-${{ matrix.device }}.txt
          echo "Build started: $(date -u)" | tee -a ../error-log-${{ matrix.device }}.txt
          
          if make ${{ env.MAKE_ARGS }} ${{ matrix.device }}_defconfig all 2>&1 | tee build.log; then
            echo "✓ Kernel build completed successfully" | tee -a ../error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: Kernel build failed!" | tee -a ../error-log-${{ matrix.device }}.txt
            echo "Last 100 lines of build output:" | tee -a ../error-log-${{ matrix.device }}.txt
            tail -100 build.log | tee -a ../error-log-${{ matrix.device }}.txt
            exit 1
          fi
          echo "Build completed: $(date -u)" | tee -a ../error-log-${{ matrix.device }}.txt
          echo "" >> ../error-log-${{ matrix.device }}.txt
          
      - name: Verify kernel build
        run: |
          echo "--- Build Verification ---" | tee -a error-log-${{ matrix.device }}.txt
          echo "Verifying kernel build..."
          if [ ! -f "kernel/out/arch/arm64/boot/Image" ]; then
          echo "✗ ERROR: Kernel Image not found! Build failed." | tee -a error-log-${{ matrix.device }}.txt
            exit 1
          fi
          echo "✓ Build verified successfully:" | tee -a error-log-${{ matrix.device }}.txt
          ls -lh kernel/out/arch/arm64/boot/Image | tee -a error-log-${{ matrix.device }}.txt
          echo "" >> error-log-${{ matrix.device }}.txt
          
      - name: Apply KPM patch
        if: ${{ github.event.inputs.enable_kpm == 'true' }}
        run: |
          echo "--- KPM Patch Application ---" | tee -a error-log-${{ matrix.device }}.txt
          echo "Applying KPM patch to kernel Image..." | tee -a error-log-${{ matrix.device }}.txt
          cd kernel/out/arch/arm64/boot/
          
          if curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch 2>&1 | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt; then
            echo "✓ KPM patch downloaded" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: Failed to download KPM patch" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
            exit 1
          fi
          
          chmod 755 patch
          if ./patch 2>&1 | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt; then
            echo "✓ KPM patch applied successfully" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: KPM patch application failed" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
            exit 1
          fi
          
          rm -rf Image
          mv oImage Image
          
          if [ -f "Image" ]; then
            echo "✓ Patched Image verified" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
          else
            echo "✗ ERROR: Patched Image not found" | tee -a $GITHUB_WORKSPACE/error-log-${{ matrix.device }}.txt
            exit 1
          fi
          cd ../../../../..
          echo "" >> error-log-${{ matrix.device }}.txt
          
      - name: Log build configuration
        run: |
          echo "=== Build Configuration Summary ===" | tee build-info-${{ matrix.device }}.txt
          echo "Device: ${{ matrix.device }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "SukiSU Branch: ${{ github.event.inputs.sukisu_branch }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "SUSFS Enabled: ${{ github.event.inputs.enable_susfs }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "KPM Enabled: ${{ github.event.inputs.enable_kpm }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "ZRAM/LZ4KD Enabled: ${{ github.event.inputs.enable_zram }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "Release Version: ${{ github.event.inputs.release_version }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "Build Date: $(date -u)" | tee -a build-info-${{ matrix.device }}.txt
          echo "Kernel Version: ${{ env.KERNEL_VERSION }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "Android Version: ${{ env.ANDROID_VERSION }}" | tee -a build-info-${{ matrix.device }}.txt
          echo "Clang Version: ${{ env.AOSP_CLANG_VERSION }}" | tee -a build-info-${{ matrix.device }}.txt
          
          # Extract SUSFS version from build log
          if [ -f "kernel/build.log" ]; then
            SUSFS_VER=$(grep -oP "SUSFS_VERSION: \Kv[0-9]+\.[0-9]+\.[0-9]+" kernel/build.log | head -1 || echo "unknown")
            echo "SUSFS_VERSION: $SUSFS_VER" | tee -a build-info-${{ matrix.device }}.txt
          fi
          
          echo "===================================" | tee -a build-info-${{ matrix.device }}.txt
          echo "" | tee -a build-info-${{ matrix.device }}.txt
          
          # Append complete error log
          if [ -f "error-log-${{ matrix.device }}.txt" ]; then
            cat error-log-${{ matrix.device }}.txt >> build-info-${{ matrix.device }}.txt
          fi
          
          # Add build warnings and errors summary
          if [ -f "kernel/build.log" ]; then
            echo "" >> build-info-${{ matrix.device }}.txt
            echo "=== Build Warnings Summary ===" >> build-info-${{ matrix.device }}.txt
            grep -i "warning:" kernel/build.log >> build-info-${{ matrix.device }}.txt || echo "No warnings found" >> build-info-${{ matrix.device }}.txt
            echo "" >> build-info-${{ matrix.device }}.txt
            echo "=== Build Errors Summary ===" >> build-info-${{ matrix.device }}.txt
            grep -i "error:" kernel/build.log >> build-info-${{ matrix.device }}.txt || echo "No errors found" >> build-info-${{ matrix.device }}.txt
          fi
          
          echo "" >> build-info-${{ matrix.device }}.txt
          echo "=== Summary Statistics ===" >> build-info-${{ matrix.device }}.txt
          if [ -f "error-log-${{ matrix.device }}.txt" ]; then
            SUCCESS=$(grep -c "✓" error-log-${{ matrix.device }}.txt || echo "0")
            WARNINGS=$(grep -c "⚠" error-log-${{ matrix.device }}.txt || echo "0")
            ERRORS=$(grep -c "✗" error-log-${{ matrix.device }}.txt || echo "0")
            echo "Successful operations: $SUCCESS" >> build-info-${{ matrix.device }}.txt
            echo "Warnings: $WARNINGS" >> build-info-${{ matrix.device }}.txt
            echo "Errors: $ERRORS" >> build-info-${{ matrix.device }}.txt
          fi
          echo "===================================" >> build-info-${{ matrix.device }}.txt
          
      - name: Save ccache stats
        if: always()
        run: |
          ccache -s
          echo "Ccache statistics saved"
          
      - name: Package AnyKernel3
        run: |
          git clone --depth=1 https://github.com/WildPlusKernel/AnyKernel3.git -b gki-2.0 AnyKernel3-${{ matrix.device }}
          
          cp kernel/out/arch/arm64/boot/Image AnyKernel3-${{ matrix.device }}/
          
          if [ "${{ github.event.inputs.sukisu_branch }}" == "Stable(标准)" ]; then
            BRANCH_SUFFIX="stable"
          else
            BRANCH_SUFFIX="dev"
          fi
          
          cd AnyKernel3-${{ matrix.device }}
          zip -r9 -q "../AnyKernel3-${{ matrix.device }}-sukisu-${BRANCH_SUFFIX}.zip" * -x .git .github README.md *placeholder
          cd ..
          
      - name: Copy kernel Image for upload
        run: |
          cp kernel/out/arch/arm64/boot/Image Image-${{ matrix.device }}
          
      - name: Upload files
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.device }}-sukisu-${{ github.event.inputs.sukisu_branch == 'Stable(标准)' && 'stable' || 'dev' }}
          path: |
            AnyKernel3-${{ matrix.device }}-sukisu-${{ github.event.inputs.sukisu_branch == 'Stable(标准)' && 'stable' || 'dev' }}.zip
            Image-${{ matrix.device }}
            build-info-${{ matrix.device }}.txt
          overwrite: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: success()
    permissions:
      contents: write
    steps:
      - name: Download build artifacts for pdx234
        uses: actions/download-artifact@v4
        with:
          name: kernel-pdx234-sukisu-${{ github.event.inputs.sukisu_branch == 'Stable(标准)' && 'stable' || 'dev' }}
          path: artifacts/pdx234

      - name: Download build artifacts for pdx237
        uses: actions/download-artifact@v4
        with:
          name: kernel-pdx237-sukisu-${{ github.event.inputs.sukisu_branch == 'Stable(标准)' && 'stable' || 'dev' }}
          path: artifacts/pdx237

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy pdx234 files
          cp artifacts/pdx234/Image-pdx234 release-assets/Image-pdx234
          cp artifacts/pdx234/build-info-pdx234.txt release-assets/build-info-pdx234.txt
          cp artifacts/pdx234/AnyKernel3-pdx234-sukisu-*.zip release-assets/
          
          # Copy pdx237 files
          cp artifacts/pdx237/Image-pdx237 release-assets/Image-pdx237
          cp artifacts/pdx237/build-info-pdx237.txt release-assets/build-info-pdx237.txt
          cp artifacts/pdx237/AnyKernel3-pdx237-sukisu-*.zip release-assets/
          
          # Auto-fetch latest APK based on branch
          if [ "${{ github.event.inputs.sukisu_branch }}" == "Dev(开发)" ]; then
            echo "Fetching latest dev/pre-release APK..."
            LATEST_APK=$(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU-Ultra/releases | \
                         jq -r '.[] | select(.prerelease==true) | .assets[].browser_download_url | select(contains(".apk"))' | \
                         head -1)
          else
            echo "Fetching latest stable APK..."
            LATEST_APK=$(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU-Ultra/releases | \
                         jq -r '.[] | select(.prerelease==false) | .assets[].browser_download_url | select(contains(".apk"))' | \
                         head -1)
          fi
          
          if [ -n "$LATEST_APK" ]; then
            APK_NAME=$(basename "$LATEST_APK")
            curl -L "$LATEST_APK" -o "release-assets/$APK_NAME"
            echo "Downloaded APK: $APK_NAME"
          else
            echo "WARNING: No APK found, skipping"
          fi
          
          cd release-assets
          sha256sum * > SHA256SUMS.txt
          cd ..
      - name: Generate release tag and notes
        id: release_info
        run: |
          TAG="multi-device-${{ github.event.inputs.release_version }}"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          
          # Extract SUSFS version from build log (pdx234)
          SUSFS_VERSION="v1.5.12"
          if [ -f "artifacts/pdx234/build-info-pdx234.txt" ]; then
            EXTRACTED=$(grep -oP "SUSFS_VERSION: \Kv[0-9]+\.[0-9]+\.[0-9]+" artifacts/pdx234/build-info-pdx234.txt | head -1 || echo "")
            if [ -n "$EXTRACTED" ]; then
              SUSFS_VERSION="$EXTRACTED"
            fi
          fi
          
          # Create release name
          RELEASE_NAME="pdx234 & pdx237 Kernel: SukiSU & SUSFS ${SUSFS_VERSION}"
          echo "RELEASE_NAME<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NAME" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Create release notes
          cat > release-notes.md << EOF
          This release includes **SukiSU** for Sony Xperia devices on LineageOS 23.0
          
          ## Supported Devices:
          - **pdx234** - Sony Xperia 1 V
          - **pdx237** - Sony Xperia 5 V
          
          Features:
          -> SukiSU-${{ github.event.inputs.sukisu_branch }}
          -> SUSFS ඞ ${SUSFS_VERSION}
          -> VFS Hooks v1.4 (Minimized Scope Manual Hooks)
          -> SUS_MAPS
          -> Baseband-guard Support
          -> BBR Support
          -> KPM ${{ github.event.inputs.enable_kpm == 'true' && 'Support' || 'not supported' }}
          -> LZ4KD ${{ github.event.inputs.enable_zram == 'true' && 'supported' || 'not supported' }}
          -> LZ4 1.10.0 ${{ github.event.inputs.enable_zram == 'true' && 'supported' || 'not supported' }}
          
          <details>
          <summary>▸ Notes:</summary>
          
          - Device specific builds for Sony Xperia with SM8550
          - Based on LineageOS 23.0 kernel source
          - In the latest version of susfs, flashing AK3 with Kernel Flasher may brick your device, try [Horizon Kernel Flasher](https://github.com/libxzr/HorizonKernelFlasher)
          - Flash the AnyKernel3 zip that matches your device model
          
          </details>
          
          ## Downloads:
          - **pdx234 (Xperia 1 V)**: AnyKernel3-pdx234-sukisu-*.zip
          - **pdx237 (Xperia 5 V)**: AnyKernel3-pdx237-sukisu-*.zip
          
          Modules:
          -> https://github.com/sidex15/ksu_module_susfs
          
          SukiSU Manager:
          -> https://github.com/SukiSU-Ultra/SukiSU-Ultra
          
          LZ4 1.10.0: Upgrade from [zzh20188/GKI_KernelSU_SUSFS](https://github.com/zzh20188/GKI_KernelSU_SUSFS)
          
          <details>
          <summary>▸ Commit Information</summary>
          
          Build compiled with:
          - **SukiSU Branch**: ${{ github.event.inputs.sukisu_branch == 'Stable(标准)' && 'susfs-main' || 'susfs-test' }}
          - **Devices**: Sony Xperia 1 V (pdx234), Sony Xperia 5 V (pdx237)
          - **Base Kernel**: 5.15
          - **Android Version**: 16
          - **LineageOS Base**: 23.0
          - **Clang Version**: ${{ env.AOSP_CLANG_VERSION }}
          - **Release Version**: ${{ github.event.inputs.release_version }}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Workflow Run**: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          </details>
          EOF
      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || {
            sudo apt update
            sudo apt install -y gh
          }
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ env.RELEASE_TAG }}" \
            --repo "${{ github.repository }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release-notes.md \
            ${{ github.event.inputs.sukisu_branch == 'Dev(开发)' && '--prerelease' || '' }} \
            release-assets/*
      - name: Output release URL
        run: |
          echo "Release created successfully!"
          echo "URL: https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}"
          echo "Release type: ${{ github.event.inputs.sukisu_branch == 'Dev(开发)' && 'Pre-release' || 'Latest release' }}"
          echo "Devices included: pdx234 (Xperia 1 V), pdx237 (Xperia 5 V)"
